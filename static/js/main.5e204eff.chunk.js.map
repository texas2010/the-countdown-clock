{"version":3,"sources":["components/Length/index.js","components/Lengths/index.js","components/Time/index.js","components/Control/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Length","this","props","id","title","value","handleDecrement","handleIncrement","className","onClick","Component","Lengths","breakValue","sessionValue","Time","formatTime","bind","seconds","date","Date","setSeconds","timeString","toISOString","substr","substring","timeValue","Control","handlePlay","handleReset","isRunning","src","App","state","currentCountDown","currentTitle","setState","tick","intervalID","setInterval","document","getElementById","play","setTimeout","pause","currentTime","timeID","clearInterval","nameValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qXAGqBA,G,6KACP,IAAD,EAODC,KAAKC,MALLC,EAFC,EAEDA,GACAC,EAHC,EAGDA,MACAC,EAJC,EAIDA,MACAC,EALC,EAKDA,gBACAC,EANC,EAMDA,gBAGJ,OACI,yBAAKC,UAAU,SAASL,GAAE,UAAKA,EAAL,WACtB,4BAAKC,EAAL,WACA,6BACI,4BACID,GAAE,UAAKA,EAAL,cACFM,QAAS,kBAAMH,EAAgB,GAAD,OAAIH,EAAJ,SAAeC,KAFjD,KAIA,0BAAMD,GAAE,UAAKA,EAAL,YAAmBE,GAC3B,4BACIF,GAAE,UAAKA,EAAL,cACFM,QAAS,kBAAMF,EAAgB,GAAD,OAAIJ,EAAJ,SAAeC,KAFjD,W,GAnBgBM,cC4BrBC,G,MA3BC,SAACT,GAAW,IAEpBU,EAIAV,EAJAU,WACAC,EAGAX,EAHAW,aACAP,EAEAJ,EAFAI,gBACAC,EACAL,EADAK,gBAEJ,OACI,yBAAKC,UAAU,WACX,kBAAC,EAAD,CACIL,GAAG,QACHC,MAAM,QACNC,MAAOO,EACPN,gBAAiBA,EACjBC,gBAAiBA,IAErB,kBAAC,EAAD,CACIJ,GAAG,UACHC,MAAM,UACNC,MAAOQ,EACPP,gBAAiBA,EACjBC,gBAAiBA,OCtBZO,G,wDACjB,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,WAAa,EAAKA,WAAWC,KAAhB,gBAFH,E,uDAKRC,GACP,IAAMC,EAAO,IAAIC,KAAK,GACtBD,EAAKE,WAAWH,GAChB,IAAMI,EAAaH,EAAKI,cAAcC,OAAO,GAAI,GACjD,MAAmB,aAAfF,EACO,QAEJA,EAAWG,UAAU,K,+BAEtB,IAAD,EAIDvB,KAAKC,MAFLE,EAFC,EAEDA,MACAqB,EAHC,EAGDA,UAEJ,OACI,yBAAKjB,UAAU,QACX,wBAAIL,GAAG,eAAeC,GACtB,6BACI,wBAAID,GAAG,aAAaF,KAAKc,WAAWU,U,GAxBtBf,cCAbgB,G,6KACP,IAAD,EAKDzB,KAAKC,MAHLyB,EAFC,EAEDA,WACAC,EAHC,EAGDA,YACAC,EAJC,EAIDA,UAEJ,OACI,yBAAKrB,UAAU,WACX,4BAAQL,GAAG,aAAaM,QAASkB,GAAaE,EAAY,QAAU,SACpE,4BAAQ1B,GAAG,QAAQM,QAASmB,GAA5B,SACA,2BAAOzB,GAAG,OAAO2B,IAAI,mH,GAXApB,cCGhBqB,G,wDACjB,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IACD8B,MAAQ,CACTpB,WAAY,EACZC,aAAc,GACdoB,iBAAkB,KAClBC,aAAc,UACdL,WAAW,GAEf,EAAKF,WAAa,EAAKA,WAAWX,KAAhB,gBAClB,EAAKY,YAAc,EAAKA,YAAYZ,KAAjB,gBACnB,EAAKV,gBAAkB,EAAKA,gBAAgBU,KAArB,gBACvB,EAAKT,gBAAkB,EAAKA,gBAAgBS,KAArB,gBAZR,E,yDAeVf,KAAK+B,MAAMH,UAGZ5B,KAAKkC,SAAS,CAAEN,WAAW,GAAS5B,KAAKmC,MAFzCnC,KAAKkC,SAAS,CAAEN,WAAW,GAAQ5B,KAAKmC,Q,6BAKxC,IAAD,OACH,GAAInC,KAAK+B,MAAMH,UAAW,CACtB,IAAMQ,EAAaC,aAAY,WAC3B,GAAoC,IAAhC,EAAKN,MAAMC,iBAMf,OAAK,EAAKD,MAAMC,sBAAhB,GACIM,SAASC,eAAe,QAAQC,OACA,YAA5B,EAAKT,MAAME,aACX,EAAKC,UAAS,SAAAH,GAAK,MAAK,CACpBC,iBAAqC,GAAnBD,EAAMpB,WACxBsB,aAAc,YAGlB,EAAKC,UAAS,SAAAH,GAAK,MAAK,CACpBC,iBAAuC,GAArBD,EAAMnB,aACxBqB,aAAc,mBAGtBQ,YAAW,WACPH,SAASC,eAAe,QAAQG,QAChCJ,SAASC,eAAe,QAAQI,YAAc,IAC/C,MArBH,EAAKT,UAAS,SAAAH,GAAK,MAAK,CACpBC,iBAAkBD,EAAMC,iBAAmB,QAuBpD,KACHhC,KAAKkC,SAAS,CACVU,OAAQR,SAGRpC,KAAK+B,MAAMa,QACXC,cAAc7C,KAAK+B,MAAMa,U,oCAKjCN,SAASC,eAAe,QAAQG,QAChCJ,SAASC,eAAe,QAAQI,YAAc,EAC1C3C,KAAK+B,MAAMa,QACXC,cAAc7C,KAAK+B,MAAMa,QAE7B5C,KAAKkC,SAAS,CACVvB,WAAY,EACZC,aAAc,GACdoB,iBAAkB,KAClBC,aAAc,UACdL,WAAW,M,sCAGHkB,EAAW3C,GACnBH,KAAK+B,MAAMe,GAAa,GACxB9C,KAAKkC,UAAS,SAAAH,GAAK,sBAAQe,EAAYf,EAAMe,GAAa,MAE1D9C,KAAK+B,MAAME,eAAiB9B,GAC5BH,KAAKkC,UAAS,SAAAH,GAAK,MAAK,CAAEC,iBAAqC,GAAnBD,EAAMe,S,sCAG1CA,EAAW3C,GACO,KAA1BH,KAAK+B,MAAMe,IACX9C,KAAKkC,UAAS,SAACH,GAAD,sBAAee,EAAYf,EAAMe,GAAa,MAE5D9C,KAAK+B,MAAME,eAAiB9B,GAC5BH,KAAKkC,UAAS,SAAAH,GAAK,MAAK,CAAEC,iBAAqC,GAAnBD,EAAMe,S,+BAIhD,IAAD,EAOD9C,KAAK+B,MALLC,EAFC,EAEDA,iBACAC,EAHC,EAGDA,aACAtB,EAJC,EAIDA,WACAC,EALC,EAKDA,aACAgB,EANC,EAMDA,UAEJ,OACI,yBAAKrB,UAAU,OACX,4CACA,kBAAC,EAAD,CACII,WAAYA,EACZC,aAAcA,EACdP,gBAAiBL,KAAKK,gBACtBC,gBAAiBN,KAAKM,kBAE1B,kBAAC,EAAD,CACIkB,UAAWQ,EACX7B,MAAO8B,IAEX,kBAAC,EAAD,CACIL,UAAWA,EACXD,YAAa3B,KAAK2B,YAClBD,WAAY1B,KAAK0B,kB,GAnHJjB,cCMbsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASC,eAAe,SDyHpB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e204eff.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './length.css'\n\nexport default class Length extends Component {\n    render() {\n        const {\n            id,\n            title,\n            value,\n            handleDecrement,\n            handleIncrement\n        } = this.props\n        // const { count } = this.state;\n        return (\n            <div className=\"Length\" id={`${id}-label`}>\n                <h3>{title} Length</h3>\n                <div>\n                    <button\n                        id={`${id}-decrement`}\n                        onClick={() => handleDecrement(`${id}Value`, title)}\n                    >-</button>\n                    <span id={`${id}-length`}>{value}</span>\n                    <button\n                        id={`${id}-increment`}\n                        onClick={() => handleIncrement(`${id}Value`, title)}\n                    >+</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport Length from '../Length'\nimport './lengths.css'\n\nconst Lengths = (props) => {\n    const {\n        breakValue,\n        sessionValue,\n        handleDecrement,\n        handleIncrement\n    } = props\n    return (\n        <div className=\"Lengths\">\n            <Length\n                id='break'\n                title='Break'\n                value={breakValue}\n                handleDecrement={handleDecrement}\n                handleIncrement={handleIncrement}\n            />\n            <Length\n                id='session'\n                title='Session'\n                value={sessionValue}\n                handleDecrement={handleDecrement}\n                handleIncrement={handleIncrement}\n            />\n        </div>\n    )\n}\n\nexport default Lengths","import React, { Component } from 'react'\nimport './time.css'\n\nexport default class Time extends Component {\n    constructor(props) {\n        super(props)\n        this.formatTime = this.formatTime.bind(this)\n    }\n\n    formatTime(seconds) {\n        const date = new Date(0);\n        date.setSeconds(seconds)\n        const timeString = date.toISOString().substr(11, 8);\n        if (timeString === '01:00:00') {\n            return '60:00'\n        }\n        return timeString.substring(3)\n    }\n    render() {\n        const {\n            title,\n            timeValue,\n        } = this.props\n        return (\n            <div className=\"Time\">\n                <h2 id=\"timer-label\">{title}</h2>\n                <div>\n                    <h1 id=\"time-left\">{this.formatTime(timeValue)}</h1>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './control.css'\n\nexport default class Control extends Component {\n    render() {\n        const {\n            handlePlay,\n            handleReset,\n            isRunning\n        } = this.props\n        return (\n            <div className=\"Control\">\n                <button id=\"start_stop\" onClick={handlePlay}>{isRunning ? 'Pause' : 'Start'}</button>\n                <button id=\"reset\" onClick={handleReset}>Reset</button>\n                <audio id=\"beep\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Lengths from '../Lengths';\nimport Time from '../Time';\nimport Control from '../Control';\nimport './App.css';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            breakValue: 5,\n            sessionValue: 25,\n            currentCountDown: 1500,\n            currentTitle: 'Session',\n            isRunning: false,\n        }\n        this.handlePlay = this.handlePlay.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.handleDecrement = this.handleDecrement.bind(this)\n        this.handleIncrement = this.handleIncrement.bind(this)\n    }\n    handlePlay() {\n        if (!this.state.isRunning) {\n            this.setState({ isRunning: true }, this.tick)\n        } else {\n            this.setState({ isRunning: false }, this.tick)\n        }\n    }\n    tick() {\n        if (this.state.isRunning) {\n            const intervalID = setInterval(() => {\n                if (this.state.currentCountDown !== 0) {\n                    this.setState(state => ({\n                        currentCountDown: state.currentCountDown - 1\n                    }))\n                    return\n                }\n                if (!this.state.currentCountDown) {\n                    document.getElementById('beep').play()\n                    if (this.state.currentTitle === 'Session') {\n                        this.setState(state => ({\n                            currentCountDown: state.breakValue * 60,\n                            currentTitle: 'Break'\n                        }))\n                    } else {\n                        this.setState(state => ({\n                            currentCountDown: state.sessionValue * 60,\n                            currentTitle: 'Session'\n                        }))\n                    }\n                    setTimeout(() => {\n                        document.getElementById('beep').pause()\n                        document.getElementById('beep').currentTime = 0;\n                    }, 1000)\n                    return\n                }\n            }, 1000)\n            this.setState({\n                timeID: intervalID\n            })\n        } else {\n            if (this.state.timeID) {\n                clearInterval(this.state.timeID)\n            }\n        }\n    }\n    handleReset() {\n        document.getElementById('beep').pause()\n        document.getElementById('beep').currentTime = 0;\n        if (this.state.timeID) {\n            clearInterval(this.state.timeID)\n        }\n        this.setState({\n            breakValue: 5,\n            sessionValue: 25,\n            currentCountDown: 1500,\n            currentTitle: 'Session',\n            isRunning: false\n        })\n    }\n    handleDecrement(nameValue, title) {\n        if (this.state[nameValue] > 1) {\n            this.setState(state => ({ [nameValue]: state[nameValue] - 1 }))\n        }\n        if (this.state.currentTitle === title) {\n            this.setState(state => ({ currentCountDown: state[nameValue] * 60 }))\n        }\n    }\n    handleIncrement(nameValue, title) {\n        if (this.state[nameValue] !== 60) {\n            this.setState((state) => ({ [nameValue]: state[nameValue] + 1 }))\n        }\n        if (this.state.currentTitle === title) {\n            this.setState(state => ({ currentCountDown: state[nameValue] * 60 }))\n        }\n    }\n\n    render() {\n        const {\n            currentCountDown,\n            currentTitle,\n            breakValue,\n            sessionValue,\n            isRunning\n        } = this.state\n        return (\n            <div className=\"App\">\n                <h1>25 + 5 Clock</h1>\n                <Lengths\n                    breakValue={breakValue}\n                    sessionValue={sessionValue}\n                    handleDecrement={this.handleDecrement}\n                    handleIncrement={this.handleIncrement}\n                />\n                <Time\n                    timeValue={currentCountDown}\n                    title={currentTitle}\n                />\n                <Control\n                    isRunning={isRunning}\n                    handleReset={this.handleReset}\n                    handlePlay={this.handlePlay}\n                />\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}